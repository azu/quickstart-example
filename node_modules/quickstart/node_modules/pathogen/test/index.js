'use strict';
/* global describe, it */

var expect = require('expect.js');

var pathogen = require('../index');

describe('constructor', function() {

  it('should normalize paths', function() {
    var path = pathogen('../.././././////////some/path');
    expect(path).to.be('../../some/path');
  });

  it('should mess with trailing slashes', function() {
    var path = pathogen('../.././some/path/');
    expect(path).to.be('../../some/path/');
  });

  it('should not mess with leading slashes', function() {
    var path;

    path = pathogen('/some/path/');
    expect(path).to.be('/some/path/');

    path = pathogen('/../.././some/path/');
    expect(path).to.be('/some/path/');
  });

  it('should always normalize . or ./ for relative paths', function() {
    var path;
    path = pathogen('./');
    expect(path).to.be('./');

    path = pathogen('././');
    expect(path).to.be('./');

    path = pathogen('././../');
    expect(path).to.be('../');

    path = pathogen('.');
    expect(path).to.be('.');

    path = pathogen('');
    expect(path).to.be('.');

    path = pathogen('/');
    expect(path).to.be('/');

    path = pathogen('/.');
    expect(path).to.be('/');

    path = pathogen('/./');
    expect(path).to.be('/');

    path = pathogen('some/path');
    expect(path).to.be('./some/path');

    path = pathogen('some/path/');
    expect(path).to.be('./some/path/');

    path = pathogen('./some/path/');
    expect(path).to.be('./some/path/');

    path = pathogen('./some/path');
    expect(path).to.be('./some/path');
  });

  it('should normalize above when it doesnt have a trailing slash', function() {
    var path;

    path = pathogen('/some/path/../');
    expect(path).to.be('/some/');

    path = pathogen('/some/path/..');
    expect(path).to.be('/some');

    path = pathogen('/../.././some/path/../../../../../../');
    expect(path).to.be('/');
  });

});

describe('resolve', function() {
  it('should resolve to the first absolute path', function() {
    var path = new pathogen('/');
    expect(path.resolve().toString()).to.be('/');

    var path = pathogen.resolve('/');
    expect(path).to.be('/');

    path = new pathogen('abc/def/ghi');
    expect(path.resolve('/abc').toString()).to.be('/abc');

    path = pathogen.resolve('abc/def/ghi', '/abc');
    expect(path).to.be('/abc');

    path = new pathogen('abc/def/ghi');
    expect(path.resolve('/abc/').toString()).to.be('/abc/');

    path = pathogen.resolve('abc/def/ghi', '/abc/');
    expect(path).to.be('/abc/');

    path = new pathogen('f:\\windows\\system32');
    expect(path.resolve('e:').toWindows()).to.be('e:\\');
  });
});

describe('relative', function() {
  it('should relativize paths directories, not files', function() {
    var path;

    path = new pathogen('/a/b/c');
    expect(path.relative('/a/b/f').toString()).to.be('./f');

    path = new pathogen('/a/b/c/');
    expect(path.relative('/a/b/f/').toString()).to.be('../f/');

    path = new pathogen('a/b/c');
    expect(path.relative('a/b/c').toString()).to.be('./c');

    path = new pathogen('c:\\windows\\system32');
    expect(path.relative('e:\\windows\\').toWindows()).to.be('e:\\windows\\');

    path = new pathogen('c:\\windows\\system32\\');
    expect(path.relative('c:\\windows\\drivers\\').toWindows()).to.be('..\\drivers\\');

    path = new pathogen('/users/kamicane/file.txt');
    expect(path.relative('/users/kamicane/').toString()).to.be('.');

    path = pathogen.relative('/users/kamicane/file.txt', '/users/kamicane/');
    expect(path).to.be('.');

    path = new pathogen('/users/kamicane/');
    expect(path.relative('/users/kamicane/file.txt').toString()).to.be('./file.txt');

  });
});

describe('extname', function() {
  it('should compute the extension name with the dot, or empty string', function() {
    var path;

    path = new pathogen('/');
    expect(path.extname()).to.be('');

    path = new pathogen('./file.js/');
    expect(path.extname()).to.be('');

    path = new pathogen('./file.js');
    expect(path.extname()).to.be('.js');

    var extname = pathogen.extname('./file.js');
    expect(extname).to.be('.js');
  });
});

describe('dirname', function() {
  it('should compute the directory name, not file name', function() {
    var path;

    path = new pathogen('/');
    expect(path.dirname().toString()).to.be('/');

    path = pathogen.dirname('/');
    expect(path).to.be('/');

    path = new pathogen('a/b/');
    expect(path.dirname().toString()).to.be('./a/b/');

    path = pathogen.dirname('a/b/');
    expect(path).to.be('./a/b/');

    path = new pathogen('a/b');
    expect(path.dirname().toString()).to.be('./a/');

    path = new pathogen('a/b/c');
    expect(path.dirname().toString()).to.be('./a/b/');
  });
});

describe('basename', function() {
  it('should compute the basename, not directory name', function() {
    var path;

    path = new pathogen('/');
    expect(path.basename()).to.be('');

    path = pathogen.basename('/');
    expect(path).to.be('');

    path = new pathogen('a/b');
    expect(path.basename()).to.be('b');

    path = pathogen.basename('a/b');
    expect(path).to.be('b');

    path = new pathogen('a/b/');
    expect(path.basename()).to.be('');

    path = new pathogen('a/b.x');
    expect(path.basename()).to.be('b.x');
  });
});

describe('toWindows', function() {

  it('should convert windows style paths back and forth', function() {
    var path;

    path = new pathogen('f:');
    expect(path.toString()).to.be('f:/');
    expect(path.toWindows()).to.be('f:\\');

    path = new pathogen('some\\folder');
    expect(path.toWindows()).to.be('.\\some\\folder');

    path = new pathogen('c:\\windows\\\\system32\\.\\\\\\drivers');
    expect(path.toString()).to.be('c:/windows/system32/drivers');
    expect(path.toWindows()).to.be('c:\\windows\\system32\\drivers');

    path = new pathogen('\\windows\\\\\\system32\\.\\\\\\drivers');
    expect(path.toString()).to.be('/windows/system32/drivers');
    expect(path.toWindows()).to.be('\\windows\\system32\\drivers');
  });

});
